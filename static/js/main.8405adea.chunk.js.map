{"version":3,"sources":["components/Registration/Registration.jsx","components/Login/Login.jsx","components/Forgot/Forgot.jsx","components/Profile/Profile.jsx","components/Address/Address.jsx","components/AddressList/AddressList.jsx","components/UnGatedRoute/UnGatedRoute.jsx","components/GatedRoute/GatedRoute.jsx","components/NavBar/NavBar.jsx","App.js","serviceWorker.js","index.js"],"names":["Registration","state","Component","Button","styled","button","FormLabel","label","FormField","div","Login","window","sessionStorage","setItem","alert","getItem","this","hasAuthenticated","Fragment","type","onClick","logOut","style","background","padding","border","onSubmit","authenticate","htmlFor","size","aria-label","name","textAlign","Forgot","Profile","Address","AddressList","UnGatedRoute","component","rest","isAuthenticated","render","props","to","GatedRoute","children","useLocation","pathname","search","NavSection","nav","NavBar","navLinks","textDecoration","color","AddressBook","section","App","path","exact","Boolean","location","hostname","match","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.8405adea.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nclass Registration extends Component {\n  state = {};\n  render() {\n    return <h1>Registration Page works</h1>;\n  }\n}\n\nexport default Registration;\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nconst Button = styled.button`\n  border: 3px double #ff3333;\n  border-radius: 10px;\n  background: honeydew;\n  padding: 5px;\n  width: 120px;\n`;\n\nconst FormLabel = styled.label`\n  display: block;\n  margin-bottom: 0;\n`;\n\nconst FormField = styled.div`\n  margin-bottom: 15px;\n`;\n\nclass Login extends Component {\n  state = {};\n\n  authenticate() {\n    window.sessionStorage.setItem(\"isAuthenticated\", \"true\");\n    alert(\"Authentication successful\");\n  }\n\n  hasAuthenticated() {\n    return window.sessionStorage.getItem(\"isAuthenticated\") === \"true\";\n  }\n\n  logOut() {\n    window.sessionStorage.setItem(\"isAuthenticated\", \"false\");\n    alert(\"Logout successful\");\n  }\n  render() {\n    return this.hasAuthenticated() ? (\n      <React.Fragment>\n        <h1>Welcome user !!</h1>\n        <Button type=\"button\" onClick={this.logOut}>\n          Logout\n        </Button>\n      </React.Fragment>\n    ) : (\n      <form\n        style={{\n          background: \"whitesmoke\",\n          padding: \"20px\",\n          border: \"2px dotted royalblue\",\n        }}\n        onSubmit={this.authenticate}\n      >\n        <FormField>\n          <FormLabel htmlFor=\"username\">User ID:</FormLabel>\n          <input type=\"text\" size=\"30\" aria-label=\"User ID Input\" name=\"uid\" />\n        </FormField>\n        <FormField>\n          <FormLabel htmlFor=\"password\">Password:</FormLabel>\n          <input\n            type=\"password\"\n            aria-label=\"Password Input\"\n            size=\"30\"\n            name=\"password\"\n          />\n        </FormField>\n        <FormField style={{ textAlign: \"center\" }}>\n          <Button type=\"submit\">Sign In</Button>\n        </FormField>\n      </form>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\nclass Forgot extends Component {\n  state = {};\n  render() {\n    return <h1>Forgot Page works</h1>;\n  }\n}\n\nexport default Forgot;\n","import React, { Component } from \"react\";\nclass Profile extends Component {\n  state = {};\n  render() {\n    return <h1>Profile Page works</h1>;\n  }\n}\n\nexport default Profile;\n","import React, { Component } from \"react\";\nclass Address extends Component {\n  state = {};\n  render() {\n    return <h1>Address List Page works</h1>;\n  }\n}\n\nexport default Address;\n","import React, { Component } from \"react\";\nclass AddressList extends Component {\n  state = {};\n  render() {\n    return <h1>Address Page works</h1>;\n  }\n}\n\nexport default AddressList;\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nexport default function UnGatedRoute({ component: Component, ...rest }) {\n  const isAuthenticated = sessionStorage.getItem(\"isAuthenticated\") === \"true\";\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        !isAuthenticated ? <Component {...props} /> : <Redirect to=\"/\" />\n      }\n    ></Route>\n  );\n}\n","import React from \"react\";\nimport { Route, Redirect, useLocation } from \"react-router-dom\";\n\nexport default function GatedRoute({ children, ...rest }) {\n  const { pathname, search } = useLocation();\n  const isAuthenticated = sessionStorage.getItem(\"isAuthenticated\") === \"true\";\n  return (\n    <Route {...rest}>\n      {isAuthenticated ? (\n        children\n      ) : (\n        <Redirect to={`/login?redirect=${pathname}${search}`} />\n      )}\n    </Route>\n  );\n}\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst NavSection = styled.nav`\n  display: flex;\n  background: gray;\n  justify-content: space-around;\n  align-items: center;\n  width: 100%;\n  padding: 10px;\n  // & > * {\n  //   flex: 1 0;\n  // }\n`;\n\nexport default function NavBar() {\n  const navLinks = {\n    textDecoration: \"none\",\n    color: \"#fff\",\n    \":hover\": {\n      color: \"orange\",\n    },\n  };\n  return (\n    <NavSection>\n      <NavLink style={navLinks} to=\"/login\">\n        Login\n      </NavLink>\n      <NavLink style={navLinks} to=\"/forgot\">\n        Forgot\n      </NavLink>\n      <NavLink style={navLinks} to=\"/register\">\n        Register\n      </NavLink>\n      <NavLink style={navLinks} to=\"/address\">\n        Address\n      </NavLink>\n      <NavLink style={navLinks} to=\"/list\">\n        List\n      </NavLink>\n      <NavLink style={navLinks} to=\"/\">\n        Home\n      </NavLink>\n    </NavSection>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Registration from \"./components/Registration/Registration\";\nimport Login from \"./components/Login/Login\";\nimport Forgot from \"./components/Forgot/Forgot\";\nimport Profile from \"./components/Profile/Profile\";\nimport Address from \"./components/Address/Address\";\nimport AddressList from \"./components/AddressList/AddressList\";\nimport UnGatedRoute from \"./components/UnGatedRoute/UnGatedRoute\";\nimport GatedRoute from \"./components/GatedRoute/GatedRoute\";\nimport styled from \"styled-components\";\nimport NavBar from \"./components/NavBar/NavBar\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  NavLink,\n} from \"react-router-dom\";\nconst AddressBook = styled.section`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 60vw;\n  flex-direction: column;\n  margin: 0 auto;\n  & > *:not(:first-child) {\n    margin-top: 1em;\n  }\n`;\nfunction App() {\n  return (\n    <AddressBook>\n      <Router>\n        <NavBar />\n        <Switch>\n          <UnGatedRoute\n            path=\"/register\"\n            exact\n            component={Registration}\n          ></UnGatedRoute>\n          <UnGatedRoute path=\"/login\" exact component={Login}></UnGatedRoute>\n          <UnGatedRoute path=\"/forgot\" exact component={Forgot}></UnGatedRoute>\n          <GatedRoute path=\"/address\" exact component={Address}></GatedRoute>\n          <GatedRoute path=\"/list\" exact component={AddressList}></GatedRoute>\n          <GatedRoute path=\"/profile\" exact component={Profile}></GatedRoute>\n          <Route\n            render={(props) => {\n              return (\n                <React.Fragment>\n                  <h1>Welcome to Address book</h1>\n                  <Login />\n                </React.Fragment>\n              );\n            }}\n          ></Route>\n        </Switch>\n      </Router>\n    </AddressBook>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}